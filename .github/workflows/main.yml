name: Frontend CI

on:
  push:
    branches:
      - master  # Of een andere branch waar je op wilt luisteren (bijv. 'dev')
  pull_request:
    branches:
      - master  # Of een andere branch waar je op wilt luisteren voor PR's

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Stap 1: Haal de code op uit je repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Stap 2: Setup Node.js omgeving
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'  # Of de versie die je gebruikt

      # Stap 3: Installeer de dependencies
      - name: Install dependencies
        run: npm install

      # Installer docker compose
      - name: Set up Docker Compose
        uses: docker/setup-buildx-action@v2

      # Start back-end
      - name: Build and run Docker Compose
        run: docker compose -f docker-compose-test.yml up &

      # Wacht totdaty backend draait
      - name: Wait for the backend
        run: npx wait-on http://localhost:9001

      # Stap 6: Run Cypress End-to-End tests (zorg dat je tests hebt ingesteld)
      - name: Run Cypress tests
        uses: cypress-io/github-action@v2
        with:
          start: npm run serve  # Start je app in de testomgeving
          wait-on: 'http://localhost:5173'  # Of de URL waarop je front-end draait
          wait-on-timeout: 15  # Wacht maximaal 60 seconden totdat de server draait
          config-file: 'cypress.config.js'

      # Stop back-end op einde
      - name: Stop Docker Compose
        run: docker compose -f docker-compose-test.yml down

      # Build dockerfile
      - name: build dockerfile
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/freelance-front-end:latest .

      # Push to docker-hub
      - name: login into docker-hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: push to docker-hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/freelance-front-end:latest

      # Transfer docker compose production file
      - name: transfer docker-compose file
        uses: appleboy/scp-action@v0.1.3
        with:
          host: 81.17.103.220
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_KEY }}
          source: "./docker-compose-production.yml"
          target: "/root/Projects/FreelanceFrontEnd"

      # Deploy production
      - name: deploy in production
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: 81.17.103.220
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            # stop container
            docker container stop $(docker ps -a | grep nadir203/freelance-front-end:latest | awk '{print $1}')
            # delete all stopped containers
            docker container prune -f
            # delete old image
            docker image rm nadir203/freelance-front-end:latest
            # pull new image
            docker pull nadir203/freelance-front-end:latest
            # navigate to docker-compose file
            cd Projects/FreelanceFrontEnd
            # run new image
            docker compose -f docker-compose-production.yml up -d